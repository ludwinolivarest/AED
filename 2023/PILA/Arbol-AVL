AVL
https://www.sfml-dev.org/
graphics.h vs studio
visualgo

#include <SFML/Graphics.hpp>
#include <iostream>
using namespace std;

struct Node {
    int key;
    Node* left;
    Node* right;
    int height;
};

int max(int a, int b) {
    return (a > b) ? a : b;
}

int getHeight(Node* node) {
    if (node == nullptr)
        return 0;
    return node->height;
}

int getBalance(Node* node) {
    if (node == nullptr)
        return 0;
    return getHeight(node->left) - getHeight(node->right);
}

Node* rotateRight(Node* node) {
    Node* leftChild = node->left;
    Node* subtree = leftChild->right;

    leftChild->right = node;
    node->left = subtree;

    node->height = max(getHeight(node->left), getHeight(node->right)) + 1;
    leftChild->height = max(getHeight(leftChild->left), getHeight(leftChild->right)) + 1;

    return leftChild;
}

Node* rotateLeft(Node* node) {
    Node* rightChild = node->right;
    Node* subtree = rightChild->left;

    rightChild->left = node;
    node->right = subtree;

    node->height = max(getHeight(node->left), getHeight(node->right)) + 1;
    rightChild->height = max(getHeight(rightChild->left), getHeight(rightChild->right)) + 1;

    return rightChild;
}

Node* insert(Node* node, int key) {
    if (node == nullptr) {
        Node* newNode = new Node();
        newNode->key = key;
        newNode->left = nullptr;
        newNode->right = nullptr;
        newNode->height = 1;
        return newNode;
    }

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node;

    node->height = 1 + max(getHeight(node->left), getHeight(node->right));

    int balance = getBalance(node);

    if (balance > 1 && key < node->left->key)
        return rotateRight(node);

    if (balance < -1 && key > node->right->key)
        return rotateLeft(node);

    if (balance > 1 && key > node->left->key) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }

    if (balance < -1 && key < node->right->key) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

Node* getMinValueNode(Node* node) {
    Node* current = node;
    while (current->left != nullptr)
        current = current->left;
    return current;
}

Node* deleteNode(Node* root, int key) {
    if (root == nullptr)
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == nullptr || root->right == nullptr) {
            Node* temp = root->left ? root->left : root->right;
            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            }
            else {
                *root = *temp;
            }
            delete temp;
        }
        else {
            Node* temp = getMinValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }

    if (root == nullptr)
        return root;

    root->height = 1 + max(getHeight(root->left), getHeight(root->right));

    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rotateRight(root);

    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }

    if (balance < -1 && getBalance(root->right) <= 0)
        return rotateLeft(root);

    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }

    return root;
}

void drawNode(sf::RenderWindow& window, Node* node, int x, int y, int offsetX) {
    if (node != nullptr) {
        sf::CircleShape circle(20);
        circle.setFillColor(sf::Color::White);
        circle.setOutlineThickness(2);
        circle.setOutlineColor(sf::Color::Black);
        circle.setPosition(x, y);
        window.draw(circle);

        sf::Font font;
        sf::Text text;
        if (font.loadFromFile("arial.ttf")) {
            text.setFont(font);
            text.setString(to_string(node->key));
            text.setCharacterSize(15);
            text.setFillColor(sf::Color::Black);
            sf::FloatRect textRect = text.getLocalBounds();
            text.setOrigin(textRect.left + textRect.width / 2.0f, textRect.top + textRect.height / 2.0f);
            text.setPosition(sf::Vector2f(x + 20, y + 20));
        }
        else {
            cout << "Error: No se pudo cargar la fuente 'arial.ttf'." << endl;
            return;
        }

        window.draw(text);

        if (node->left != nullptr) {
            sf::Vertex line[] = {
                sf::Vertex(sf::Vector2f(x + 20, y + 20)),
                sf::Vertex(sf::Vector2f(x - offsetX + 20, y + 60))
            };
            window.draw(line, 2, sf::Lines);
            drawNode(window, node->left, x - offsetX, y + 40, offsetX / 2);
        }

        if (node->right != nullptr) {
            sf::Vertex line[] = {
                sf::Vertex(sf::Vector2f(x + 20, y + 20)),
                sf::Vertex(sf::Vector2f(x + offsetX + 20, y + 60))
            };
            window.draw(line, 2, sf::Lines);
            drawNode(window, node->right, x + offsetX, y + 40, offsetX / 2);
        }
    }
}

void drawTree(const Node* root) {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Árbol AVL");
    window.setFramerateLimit(60);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear(sf::Color::White);

        drawNode(window, root, 400, 50, 200);

        window.display();
    }
}

int main() {
    Node* root = nullptr;

    // Insertar elementos en el árbol AVL
    root = insert(root, 10);
    root = insert(root, 20);
    root = insert(root, 30);
    root = insert(root, 40);
    root = insert(root, 50);

    // Dibujar el árbol AVL
    drawTree(root);

    return 0;
}

